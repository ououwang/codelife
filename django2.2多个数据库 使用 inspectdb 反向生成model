1.在settings.py中配置自己所需的数据库


2.同级目录下创建database_router.py文件

# -- coding: utf-8 --**
from django.conf import settings

DATABASE_MAPPING = settings.DATABASE_APPS_MAPPING

class DatabaseAppsRouter(object):
“”"
A router to control all database operations on models for different
databases.

In case an app is not set in settings.DATABASE_APPS_MAPPING, the router
will fallback to the `default` database.

Settings example:

DATABASE_APPS_MAPPING = {'app1': 'db1', 'app2': 'db2'}
"""

def db_for_read(self, model, **hints):
    """"Point all read operations to the specific database."""
    if model._meta.app_label in DATABASE_MAPPING:
        return DATABASE_MAPPING[model._meta.app_label]
    return None

def db_for_write(self, model, **hints):
    """Point all write operations to the specific database."""
    if model._meta.app_label in DATABASE_MAPPING:
        return DATABASE_MAPPING[model._meta.app_label]
    return None

def allow_relation(self, obj1, obj2, **hints):
    """Allow any relation between apps that use the same database."""
    db_obj1 = DATABASE_MAPPING.get(obj1._meta.app_label)
    db_obj2 = DATABASE_MAPPING.get(obj2._meta.app_label)
    if db_obj1 and db_obj2:
        if db_obj1 == db_obj2:
            return True
        else:
            return False
    return None

# Django 1.7 - Django 1.11
def allow_migrate(self, db, app_label, model_name=None, **hints):
    print(db, app_label, model_name, hints)
    if db in DATABASE_MAPPING.values():
        return DATABASE_MAPPING.get(app_label) == db
    elif app_label in DATABASE_MAPPING:
        return False
    return None

使用inspectdb 反向生成：
python manage.py inspectdb --database XX > models.py XX （–database 你的数据库（database配置内对应的 如：‘db1’） > 【生成的位置】models.py 【可指定生成数据表】）
